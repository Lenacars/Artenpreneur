generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"] // sadece kendi şeman!
}

// Model tanımlarınız

model User {
  id       String  @id @default(uuid()) // UUID primary key
  name     String?
  email    String? @unique
  password String
  role     String
  image    String?

  certificates Certificate[] // Kullanıcının sertifikaları
  enrollments  Enrollment[] // Kullanıcının kayıtlı olduğu kurslar

  userRoles UserRole[] // <-- İLİŞKİ: bir kullanıcıya birden fazla rol

  @@map("users")
  @@schema("public")
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  role   String

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@schema("public")
}

model Course {
  id         String @id @default(uuid())
  title      String
  instructor String
  duration   Int?

  fullVideoR2Key    String?
  previewVideoR2Key String?

  subtitle           String?
  category           String?
  price              Float?
  originalPrice      Float?
  level              String?
  rating             Float?
  reviewCount        Int?
  studentCount       Int?
  lessonCount        Int?
  language           String?
  lastUpdated        DateTime?
  completionRate     Int?
  isBestseller       Boolean?
  hasLifetimeAccess  Boolean?
  hasCertificate     Boolean?
  description        String?
  longDescription    String?
  coursePreviewImage String?
  slug               String?
  offerEndsAt        DateTime?

  certificates Certificate[]
  enrollments  Enrollment[]

  @@map("courses")
  @@schema("public")
}

model Enrollment {
  id         String   @id @default(uuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("enrollments")
  @@schema("public")
}

model Certificate {
  id                String   @id @default(uuid())
  certificateNumber String   @unique
  verificationCode  String   @unique
  grade             Int?
  completedAt       DateTime
  createdAt         DateTime @default(now())
  status            String   @default("ACTIVE")

  userId   String
  courseId String
  issuedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@map("certificates")
  @@schema("public")
}
